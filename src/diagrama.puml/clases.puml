@startuml

title DriveHub

class Plataforma {
    - vehiculos: Vehiculo[]
    - reservas: Reserva[]
    - clientes: Cliente[]

    -- getters y setters --

    + agregarVehiculo(nuevoVehiculo: Vehiculo): void
    + registrarCliente(nuevoCliente: Cliente): void

    + registrarCobro(): number
    + registrarKmsRecorridos(): number
    + entregarVehiculo (): // cambie el estado a disponible
    + validarDisponibilidad(v: Vehiculo, fechaInicio: Date, fechaFin: Date): boolean
    + programarMantenimiento(vehiculo: Vehiculo, mantenimiento: Mantenimiento): void
    + procesarDevolucion(reserva: Reserva, kilometrajeFinal: number): number

}

enum ESTADO_VEHICULO {
  DISPONIBLE,
  EN_ALQUILER,
  EN_MANTENIMIENTO,
  NECESITA_LIMPIEZA,
}

'class ESTADO_RESERVA {
'  PENDIENTE,
'  CONFIRMADA,
'  EN_CURSO,
'  FINALIZADA,
'  CANCELADA,
'}

abstract class Vehiculo {
  - matricula: string
  - marca: string
  - modelo: string
  - anio: number
  - estado: EstadoVehiculo
  - kilometrajeActual: number

  + {abstract} calcularTarifa(dias: number, kilometrosRecorridos: number): number

  + getEstadoVehiculo(): ESTADO_VEHICULO
  + cambiarEstado(nuevoEstado: EstadoVehiculo): void
  + estaDisponible(fechaInicio: Date, fechaFin: Date): boolean

  - historialMantenimiento: Mantenimiento[]
  + registrarKilometraje(kilometraje: number): void
  + agregarMantenimiento(mantenimiento: Mantenimiento): void
}
'Por ejemplo el estaDisponible(...): boolean ; es el quiereSubir de la clase Empleado

class Compacto {
  - TARIFA_BASE: number = 30
  - CARGO_KM: number = 0.15
  - KM_LIMITE_DIARIO: number = 100

  --getters y setters--  
  + calcularTarifa(dias: number, kilometrosRecorridos: number): number
}

class Sedan {
  - TARIFA_BASE: number = 50
  - CARGO_KM: number = 0.20

  --getters y setters--    
  + calcularTarifa(dias: number, kilometrosRecorridos: number): number
}

class Suv {
  - TARIFA_BASE: number = 80
  - CARGO_SEGURO_DIA: number = 15
  - CARGO_KM: number = 0.25
  - KM_LIMITE_TOTAL: number = 500

  --getters y setters--  
  + calcularTarifa(dias: number, kilometrosRecorridos: number): number
}

class Cliente {
  - idCliente: number
  - nombre: string
  - apellido: string

  + crearReserva(vehiculo: Vehiculo, fechaInicio: Date, fechaFin: Date): Reserva
  
  + getReservas(): Reserva[]
}

class Reserva {
  - idReserva: number
  - fechaInicio: Date
  - fechaFin: Date

  - kilometrajeInicial: number
  - kilometrajeFinal: number
  
  --getters y setters--    
  + validarDisponibilidadVehiculo(): boolean

  + confirmarReserva(): void
  + iniciarAlquiler(kilometrajeInicial: number): void
  + finalizarAlquiler(kilometrajeFinal: number): void
  + calcularCostoTotal(): number
  + getDiasAlquiler(): number
  + getKilometrosRecorridos(): number
}
' Y el validarDisponibilidadVehiculo() usa el vehiculo.estaDisponible(...) dadas las fechas que se pasan en la reserva.

class Mantenimiento {
  - fecha: Date
  - costo: number
  + registrarMantenimineto(): void
}

' ============================================
' RELACIONES DE HERENCIA (Generalización)
' ============================================
Vehiculo <|-- Compacto : hereda
Vehiculo <|-- Sedan : hereda
Vehiculo <|-- SUV : hereda

' ============================================
' RELACIONES DE COMPOSICIÓN
' ============================================
' Cliente compone Reservas (si se elimina el cliente, se eliminan sus reservas)
Cliente "1" *-- "0..*" Reserva : tiene >

' Vehiculo compone Mantenimientos (si se elimina el vehículo, se eliminan sus mantenimientos)
Vehiculo "1" *-- "0..*" Mantenimiento : tiene >

' ============================================
' RELACIONES DE ASOCIACIÓN
' ============================================
' Reserva asocia con Vehiculo (la reserva necesita saber qué vehículo)
Reserva "0..*" --> "1" Vehiculo : reserva >

' Reserva asocia con Cliente (la reserva necesita saber quién la hizo)
Reserva "0..*" --> "1" Cliente : realizada por >

' ============================================
' RELACIONES DE AGREGACIÓN
' ============================================
' Plataforma agrega Vehiculos (los vehículos pueden existir independientemente)
Plataforma "1" o-- "0..*" Vehiculo : gestiona >

' Plataforma agrega Clientes (los clientes pueden existir independientemente)
Plataforma "1" o-- "0..*" Cliente : gestiona >

' Plataforma agrega Reservas (las reservas pueden existir independientemente)
Plataforma "1" o-- "0..*" Reserva : gestiona >

' ============================================
' RELACIONES DE DEPENDENCIA
' ============================================
' Vehiculo depende de EstadoVehiculo (usa el enum)
Vehiculo ..> EstadoVehiculo : <<usa>>

' Plataforma depende de Mantenimiento (método programarMantenimiento)
Plataforma ..> Mantenimiento : <<usa>>

note right of Vehiculo
  **Clase abstracta**
  Define el contrato para
  calcularTarifa() que cada
  tipo de vehículo implementa
end note

note bottom of Plataforma
  **Fachada del Sistema**
  Coordina todas las operaciones
  y gestiona las entidades principales
end note

note left of Reserva
  **Clase de asociación**
  Conecta Cliente con Vehículo
  y gestiona el alquiler
end note

@enduml